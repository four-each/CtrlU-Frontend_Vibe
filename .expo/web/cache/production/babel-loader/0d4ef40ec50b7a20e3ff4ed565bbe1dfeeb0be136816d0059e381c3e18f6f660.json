{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _get from\"@babel/runtime/helpers/get\";import _inherits from\"@babel/runtime/helpers/inherits\";function _callSuper(t,o,e){return o=_getPrototypeOf(o),_possibleConstructorReturn(t,_isNativeReflectConstruct()?Reflect.construct(o,e||[],_getPrototypeOf(t).constructor):o.apply(t,e));}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function _isNativeReflectConstruct(){return!!t;})();}function _superPropGet(t,o,e,r){var p=_get(_getPrototypeOf(1&r?t.prototype:t),o,e);return 2&r&&\"function\"==typeof p?function(t){return p.apply(e,t);}:p;}import DiscreteGestureHandler from\"./DiscreteGestureHandler\";import*as NodeManager from\"./NodeManager\";import PressGestureHandler from\"./PressGestureHandler\";import{TEST_MIN_IF_NOT_NAN,VEC_LEN_SQ}from\"./utils\";var NativeViewGestureHandler=function(_PressGestureHandler){function NativeViewGestureHandler(){_classCallCheck(this,NativeViewGestureHandler);return _callSuper(this,NativeViewGestureHandler,arguments);}_inherits(NativeViewGestureHandler,_PressGestureHandler);return _createClass(NativeViewGestureHandler,[{key:\"isNative\",get:function get(){return true;}},{key:\"onRawEvent\",value:function onRawEvent(ev){var _this=this;_superPropGet(NativeViewGestureHandler,\"onRawEvent\",this,3)([ev]);if(!ev.isFinal){if(TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({x:ev.deltaX,y:ev.deltaY}),10)){if(this.config.disallowInterruption){var gestures=Object.values(NodeManager.getNodes()).filter(function(gesture){var handlerTag=gesture.handlerTag,view=gesture.view,isGestureRunning=gesture.isGestureRunning;return(handlerTag!==_this.handlerTag&&isGestureRunning&&gesture instanceof DiscreteGestureHandler&&view&&_this.view.contains(view));});for(var gesture of gestures){gesture.forceInvalidate(ev);}}}}}}]);}(PressGestureHandler);export default NativeViewGestureHandler;","map":{"version":3,"names":["DiscreteGestureHandler","NodeManager","PressGestureHandler","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","NativeViewGestureHandler","_PressGestureHandler","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","get","value","onRawEvent","ev","_this","_superPropGet","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","Object","values","getNodes","filter","gesture","handlerTag","view","isGestureRunning","contains","forceInvalidate"],"sources":["/Users/positive-yeon/Downloads/cursor-talk-to-figma-mcp-main/node_modules/react-native-gesture-handler/lib/module/web_hammer/NativeViewGestureHandler.ts"],"sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  get isNative() {\n    return true;\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        // @ts-ignore FIXME(TS) config type\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(\n            (gesture) => {\n              const { handlerTag, view, isGestureRunning } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            }\n          );\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"],"mappings":"86BAAA,MAAO,CAAAA,sBAAP,gCAEA,MAAO,GAAK,CAAAC,WAAZ,qBACA,MAAO,CAAAC,mBAAP,6BACA,OAASC,mBAAT,CAA8BC,UAA9B,kBAEM,CAAAC,wBAAN,UAAAC,oBAAA,WAAAD,yBAAA,EAAAE,eAAA,MAAAF,wBAAA,SAAAG,UAAA,MAAAH,wBAAA,CAAAI,SAAA,GAAAC,SAAA,CAAAL,wBAAA,CAAAC,oBAAA,SAAAK,YAAA,CAAAN,wBAAA,GAAAO,GAAA,YAAAC,GAAA,CACc,SAAAA,IAAA,CAAG,CACb,MAAO,KAAP,CACD,IAAAD,GAAA,cAAAE,KAAA,CAED,SAAAC,UAAUA,CAACC,EAAD,CAAqB,KAAAC,KAAA,MAC7BC,aAAA,CAAAb,wBAAA,uBAAiBW,EAAjB,GACA,GAAI,CAACA,EAAE,CAACG,OAAR,CAAiB,CAEf,GAAIhB,mBAAmB,CAACC,UAAU,CAAC,CAAEgB,CAAC,CAAEJ,EAAE,CAACK,MAAR,CAAgBC,CAAC,CAAEN,EAAE,CAACO,MAAtB,CAAD,CAAX,CAA6C,EAA7C,CAAvB,CAAyE,CAEvE,GAAI,KAAKC,MAAL,CAAYC,oBAAhB,CAAsC,CACpC,GAAM,CAAAC,QAAQ,CAAGC,MAAM,CAACC,MAAP,CAAc3B,WAAW,CAAC4B,QAAZ,EAAd,EAAsCC,MAAtC,CACd,SAAAC,OAAD,CAAa,CACX,GAAQ,CAAAC,UAAF,CAAyCD,OAA/C,CAAQC,UAAF,CAAcC,IAAd,CAAyCF,OAA/C,CAAoBE,IAAd,CAAoBC,gBAAA,CAAqBH,OAA/C,CAA0BG,gBAAA,CAC1B,OAEEF,UAAU,GAAKf,KAAA,CAAKe,UAApB,EAEAE,gBAFA,EAIAH,OAAO,WAAY,CAAA/B,sBAJnB,EAMAiC,IANA,EAQAhB,KAAA,CAAKgB,IAAL,CAAUE,QAAV,CAAmBF,IAAnB,GAEH,CAfc,CAAjB,CAkBA,IAAK,GAAM,CAAAF,OAAX,GAAsB,CAAAL,QAAtB,CAAgC,CAE9BK,OAAO,CAACK,eAAR,CAAwBpB,EAAxB,EACD,CACF,CACF,CACF,CACF,OArCoCd,mBAAvC,EAwCA,cAAe,CAAAG,wBAAf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}